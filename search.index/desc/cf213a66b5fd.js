rd_("AmGets the instruction pointer.AgGets the stack pointer.BaA slice of IRQ handler functions.BjGet a flags value with all known bits set.BlWrapper functions for assembly instructions.BmThe faulting virtual address (if applicable).CoThe <code>CR3</code> register value, i.e., the page table root.BgCreates a dummy context for a new task.CjCreates a new context with the given entry point, user \xe2\x80\xa6DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6Cm<code>RSP</code> after all callee-saved registers are pushed.AbEnters user space.GkCall <code>insert</code> when <code>value</code> is <code>true</code> or <code>remove</code> when <code>value</code> is \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa6AbGets the TLS area.AgThe memory is readable.AnThe memory is user accessible.AnGets the 0th syscall argument.AnGets the 1st syscall argument.AnGets the 2nd syscall argument.AnGets the 3rd syscall argument.AnGets the 4th syscall argument.AnGets the 5th syscall argument.AnGet the underlying bits value.AoReturns the argument unchanged.00000000AeHalt the current CPU.ClHelper functions to initialize the CPU states on systems \xe2\x80\xa6CjInitializes the context for a new task, with the given \xe2\x80\xa6BaCalls <code>U::from(self)</code>.00000000BfYield a set of contained flags values.BmReturns a generalized kind of this exception.CfSaves the current extended states from CPU to this \xe2\x80\xa6nTrap handling.AjOther kinds of exceptions.AgThe memory is writable.eaxcpuD`The bitwise or (<code>|</code>) of the bits in two flags values.BfGet a flags value with all bits unset.AhGets the syscall number.2AlThe memory is device memory.DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in each flags value.6CcWhether all known bits in this flags value are set.CeThe intersection of a source flags value with the \xe2\x80\xa6AoGets the return value register.AmSets the instruction pointer.AgSets the stack pointer.6BhStructures and functions for user space.AeThe exception vector.AiThe memory is executable.nA system call.oUnknown reason.CcReturns the extended state with initialized values.BhThread pointer (FS segment base address)oFS Segment BaseoGS Segment BaseChRestores the extended states from this structure to CPU.AbSets the TLS area.AgThe memory is uncached.CmWhether all set bits in a source flags value are also set \xe2\x80\xa6BoWhether all bits in this flags value are unset.AnSets the 0th syscall argument.AnSets the 1st syscall argument.AnSets the 2nd syscall argument.AnSets the 3rd syscall argument.AnSets the 4th syscall argument.AnSets the 5th syscall argument.AjOther kinds of exceptions.mAn interrupt.mA page fault.ChSaved registers when a trap (interrupt or exception) \xe2\x80\xa6BgUnwind the stack and get the backtrace.BfExtended states, i.e., FP/SIMD states.A`Flushes the TLB.AjConvert from a bits value.D`The bitwise or (<code>|</code>) of the bits in each flags value.ClGet a flags value with the bits of a flag with the given \xe2\x80\xa6BmInitializes trap handling on the current CPU.AhSets the syscall number.AiSwitches to another task.CkCopies data from source to destination, where addresses \xe2\x80\xa6AgA breakpoint exception.CcA 512-byte memory region for the FXSAVE/FXRSTOR \xe2\x80\xa6AnA misaligned access exception.BhA slice of page fault handler functions.DgThe bitwise negation (<code>!</code>) of the bits in a flags value, \xe2\x80\xa6CeThe intersection of a source flags value with the \xe2\x80\xa6oThe error code.CmWhether any set bits in a source flags value are also set \xe2\x80\xa6BlYield a set of contained named flags values.BaThe kernel stack top of the task.AoSets the return value register.5B`Saved hardware states of a task.AlContext to enter user space.C`Allows the current CPU to respond to interrupts.CaMemory region for the FXSAVE/FXRSTOR instruction.BhInitializes the per-CPU data structures.CnA reason as to why the control of the CPU is returned from \xe2\x80\xa6D`The bitwise or (<code>|</code>) of the bits in two flags values.BkMakes the current CPU to ignore interrupts.DeThe bitwise and (<code>&amp;</code>) of the bits in two flags values.ClReturns whether the current CPU is allowed to respond to \xe2\x80\xa6CkInformation about an exception that occurred in user space.CbA generalized kind for <code>ExceptionInfo</code>.CaExtended state of a task, such as FP/SIMD states.4DfThe bitwise exclusive-or (<code>^</code>) of the bits in two flags \xe2\x80\xa6CaRelaxes the current CPU and waits for interrupts.CdGeneric page table entry flags that indicate the \xe2\x80\xa6BbConvert from a bits value exactly.BaAn illegal instruction exception.CfConvert from a bits value, unsetting any unknown bits.DcReads the thread pointer of the current CPU (<code>FS_BASE</code>).BlChanges the page table root in this context.CnReads the current page table root register for user space (\xe2\x80\xa68DdWrites the thread pointer of the current CPU (<code>FS_BASE</code>).CmWrites the register to update the current page table root \xe2\x80\xa6CiReads the current page table root register for kernel \xe2\x80\xa61")